{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["export const renderImages = (images) => {\n  const gallery = document.querySelector('.gallery');\n  gallery.innerHTML = ''; // Очистить старые изображения перед новым запросом\n\n  images.forEach(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n    const card = `\n      <div class=\"card\">\n        <a href=\"${largeImageURL}\">\n          <img src=\"${webformatURL}\" alt=\"${tags}\" />\n        </a>\n        <p>Likes: ${likes} | Views: ${views} | Comments: ${comments} | Downloads: ${downloads}</p>\n      </div>\n    `;\n    gallery.insertAdjacentHTML('beforeend', card);\n  });\n};\n\n// Добавьте экспорт функции fetchImages\nexport const fetchImages = async (query) => {\n  const API_KEY = '47502659-8e710eb0ff3e952458316b5b2';\n  const BASE_URL = 'https://pixabay.com/api/';\n\n  try {\n    const url = `${BASE_URL}?key=${API_KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true`;\n    const response = await fetch(url);\n\n    if (!response.ok) {\n      throw new Error(`Ошибка при получении данных: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    if (!data.hits || data.hits.length === 0) {\n      throw new Error('Нет изображений по запросу');\n    }\n\n    return data.hits; // Возвращаем массив с изображениями\n  } catch (error) {\n    console.error(error);\n    return []; // Возвращаем пустой массив в случае ошибки\n  }\n};\n","export const renderImages = (images) => {\n  const gallery = document.querySelector('.gallery');\n  gallery.innerHTML = ''; // Очистить старые изображения перед новым запросом\n\n  images.forEach(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) => {\n    const card = `\n      <div class=\"card\">\n        <a href=\"${largeImageURL}\">\n          <img src=\"${webformatURL}\" alt=\"${tags}\" />\n        </a>\n        <p>Likes: ${likes} | Views: ${views} | Comments: ${comments} | Downloads: ${downloads}</p>\n      </div>\n    `;\n    gallery.insertAdjacentHTML('beforeend', card);\n  });\n};\n","import { fetchImages } from './js/pixabay-api'; // импортируем функцию для получения изображений\nimport { renderImages } from './js/render-functions'; // импортируем функцию для рендеринга изображений\nimport iziToast from 'izitoast'; // импортируем библиотеку для отображения уведомлений\nimport SimpleLightbox from 'simplelightbox'; // импортируем библиотеку для создания галереи изображений\nimport 'simplelightbox/dist/simple-lightbox.min.css'; // стили для SimpleLightbox\nimport 'bootstrap'; // импортируем Bootstrap для стилизации\nimport 'izitoast/dist/css/iziToast.min.css'; // стили для iziToast\n\nconst searchForm = document.querySelector('.search-form');\nconst searchInput = document.querySelector('.search-input');\nconst gallery = document.querySelector('.gallery');\n\n// Обработчик события на отправку формы\nsearchForm.addEventListener('submit', async (event) => {\n  event.preventDefault(); // Предотвращаем стандартное поведение формы\n\n  const query = searchInput.value.trim(); // Получаем строку запроса\n\n  if (!query) {\n    iziToast.error({ message: 'Please enter a search term' });\n    return;\n  }\n\n  // Показываем индикатор загрузки\n  gallery.innerHTML = '<div class=\"loader\">Loading...</div>';\n\n  try {\n    const images = await fetchImages(query); // Запрашиваем изображения по введенному запросу\n\n    if (images.length === 0) {\n      iziToast.info({ message: 'Sorry, there are no images matching your search query. Please try again!' });\n    } else {\n      renderImages(images); // Отображаем изображения\n      new SimpleLightbox('.gallery a'); // Инициализация SimpleLightbox для галереи\n    }\n  } catch (error) {\n    iziToast.error({ message: 'Something went wrong, please try again!' });\n  } finally {\n    // Убираем индикатор загрузки\n    const loader = document.querySelector('.loader');\n    if (loader) loader.remove();\n  }\n});\n"],"names":["fetchImages","query","API_KEY","BASE_URL","url","response","data","error","renderImages","images","gallery","webformatURL","largeImageURL","tags","likes","views","comments","downloads","card","searchForm","searchInput","event","iziToast","SimpleLightbox","loader"],"mappings":"wvBAkBO,MAAMA,EAAc,MAAOC,GAAU,CAC1C,MAAMC,EAAU,qCACVC,EAAW,2BAEjB,GAAI,CACF,MAAMC,EAAM,GAAGD,CAAQ,QAAQD,CAAO,MAAMD,CAAK,2DAC3CI,EAAW,MAAM,MAAMD,CAAG,EAEhC,GAAI,CAACC,EAAS,GACZ,MAAM,IAAI,MAAM,gCAAgCA,EAAS,UAAU,EAAE,EAGvE,MAAMC,EAAO,MAAMD,EAAS,OAE5B,GAAI,CAACC,EAAK,MAAQA,EAAK,KAAK,SAAW,EACrC,MAAM,IAAI,MAAM,4BAA4B,EAG9C,OAAOA,EAAK,IACb,OAAQC,EAAO,CACd,eAAQ,MAAMA,CAAK,EACZ,EACR,CACH,ECzCaC,EAAgBC,GAAW,CACtC,MAAMC,EAAU,SAAS,cAAc,UAAU,EACjDA,EAAQ,UAAY,GAEpBD,EAAO,QAAQ,CAAC,CAAE,aAAAE,EAAc,cAAAC,EAAe,KAAAC,EAAM,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,UAAAC,KAAgB,CAC3F,MAAMC,EAAO;AAAA;AAAA,mBAEEN,CAAa;AAAA,sBACVD,CAAY,UAAUE,CAAI;AAAA;AAAA,oBAE5BC,CAAK,aAAaC,CAAK,gBAAgBC,CAAQ,iBAAiBC,CAAS;AAAA;AAAA,MAGzFP,EAAQ,mBAAmB,YAAaQ,CAAI,CAChD,CAAG,CACH,ECPMC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAc,SAAS,cAAc,eAAe,EACpDV,EAAU,SAAS,cAAc,UAAU,EAGjDS,EAAW,iBAAiB,SAAU,MAAOE,GAAU,CACrDA,EAAM,eAAc,EAEpB,MAAMpB,EAAQmB,EAAY,MAAM,KAAI,EAEpC,GAAI,CAACnB,EAAO,CACVqB,EAAS,MAAM,CAAE,QAAS,4BAA8B,CAAA,EACxD,MACD,CAGDZ,EAAQ,UAAY,uCAEpB,GAAI,CACF,MAAMD,EAAS,MAAMT,EAAYC,CAAK,EAElCQ,EAAO,SAAW,EACpBa,EAAS,KAAK,CAAE,QAAS,0EAA4E,CAAA,GAErGd,EAAaC,CAAM,EACnB,IAAIc,EAAe,YAAY,EAElC,MAAe,CACdD,EAAS,MAAM,CAAE,QAAS,yCAA2C,CAAA,CACzE,QAAY,CAER,MAAME,EAAS,SAAS,cAAc,SAAS,EAC3CA,GAAQA,EAAO,QACpB,CACH,CAAC"}